; external functions from X11 library
extern XOpenDisplay
extern XDisplayName
extern XCloseDisplay
extern XCreateSimpleWindow
extern XMapWindow
extern XRootWindow
extern XSelectInput
extern XFlush
extern XCreateGC
extern XSetForeground
extern XDrawLine
extern XNextEvent

; external functions from stdio library (ld-linux-x86-64.so.2)    
extern exit

extern scanf
extern printf

%define	StructureNotifyMask	131072
%define KeyPressMask		1
%define ButtonPressMask		4
%define MapNotify		19
%define KeyPress		2
%define ButtonPress		4
%define Expose			12
%define ConfigureNotify		22
%define CreateNotify 16
%define QWORD	8
%define DWORD	4
%define WORD	2
%define BYTE	1

global main


section .bss
display_name:	resq	1
screen:		resd	1
depth:         	resd	1
connection:    	resd	1
width:         	resd	1
height:        	resd	1
window:		resq	1
gc:		resq	1

value1:	resd 1
tmp:	resd 1
; result_mul:	resq 1
result_mul:	resd 1
current_point: resd 1

rotationX: resd 1
rotationY: resd 1
rotationZ: resd 1

cosinus:	resd	360
sinus:	resd	360

section .data

scan_int: db "%hhd", 0
print_int: db "value = %hhd", 10, 0
print_point: db "point nb = %d", 10, 0
print_face: db "value face = %d", 10, 0
print_coords: db "%d coords = %f", 10, 0
print_coords2: db "coords = %f", 10, 0
print_debug: db "DEBUG=[%d]", 10, 0
print_debug2: db "2 - DEBUG=[%d]  - %d", 10, 0
print_ici: db "ici", 10, 0
print_operation: db "[%d] * [%d] = [%d]", 10, 0
print_dodec: db "dodec + %d", 10, 0
print_resmul: db "multiplication = %d", 10, 0
print_currentpoint: db "point=[%d]", 10, 0
print_single_coords: db "COORDS = %f", 10, 0

print_x1: db "X1 = %d", 10, 0
print_y1: db "Y1 = %d", 10, 0
print_x2: db "X2 = %d", 10, 0
print_y2: db "Y2 = %d", 10, 0

print_ABC: db 10, "A = %d, B = %d, C = %d", 10, 0
print_xyz: db 10, "XA = %d, YA = %d, XB = %d, XY = %d, XC = %d, YC = %d", 10, 0
print_xyz2: db 10, "X = %f --- Y = %f --- Z = %f ---", 10, 0

angle:	dd	0
demiangle:	dd	180


df: dd 400.0
zoff: dd 400.0
xoff: dd 200.0
yoff: dd 200.0

xRot: dd 0
yRot: dd 0
zRot: dd 0


xBA: dd 0
yBA: dd 0
xBC: dd 0
yBC: dd 0

xA: dd 0
yA: dd 0
xB: dd 0
yB: dd 0
xC: dd 0
yC: dd 0

A: dd 0
B: dd 0
C: dd 0

finalX1: dd 0
finalY1: dd 0
finalX2: dd 0
finalY2: dd 0

normal: dd 0

enter_xRot: db "Rotation X = ", 0
enter_yRot: db "Rotation Y = ", 0
enter_zRot: db "Rotation Z = ", 0

nb_faces: db  4

counter: dd 0
i: dw 0
j: db 0
k: dw 0

x1:	dd	0
x2:	dd	0
y1:	dd	0
y2:	dd	0
z1:	dd	0
z2:	dd	0

firstDiv 	dd	0
secondDiv 	dd	0

point: dd 0

facesPos:	db	0
pointPos:	dd	0
savePoint1:	dd	0
savePoint2:	dd	0

event:		times	24 dq 0

; Un point par ligne sous la forme X,Y,Z
dodec:	dd	0.0,50.0,80.901699		; point 0
		dd 	0.0,-50.0,80.901699		; point 1
		dd 	80.901699,0.0,50.0		; point 2
		dd 	80.901699,0.0,-50.0		; point 3
		dd 	0.0,50.0,-80.901699		; point 4
		dd 	0.0,-50.0,-80.901699	; point 5
		dd 	-80.901699,0.0,-50.0	; point 6
		dd 	-80.901699,0.0,50.0		; point 7
		dd 	50.0,80.901699,0.0		; point 8
		dd 	-50.0,80.901699,0.0		; point 9
		dd 	-50.0,-80.901699,0.0	; point 10 
		dd	50.0,-80.901699,0.0		; point 11

dodec2: dd 0.0,1.1,2.2
		dd 3.3,4.4,5.5
		dd 6.6,7.7,8.8
		dd 9.9,10.10,11.11
		dd 12.12,13.13,14.14
		dd 15.15,16.16,17.17
		dd 18.18,19.19,20.20
		dd 21.21,22.22,23.23
		dd 24.24,25.25,26.26
		dd 27.27,28.28,29.29
		dd 30.30,31.31,32.32
		dd 33.33,34.34,35.35
		dd 36.36,37.37,38.38

; Une face par ligne, chaque face est composée de 3 points tels que numérotés dans le tableau dodec ci-dessus
; Les points sont donnés dans le bon ordre pour le calcul des normales.
; Exemples :
; pour la première face (0,8,9), on fera le produit vectoriel des vecteurs 80 (vecteur des points 8 et 0) et 89 (vecteur des points 8 et 9)	
; pour la deuxième face (0,2,8), on fera le produit vectoriel des vecteurs 20 (vecteur des points 2 et 0) et 28 (vecteur des points 2 et 8)
; etc...
faces:	dd	0,8,9,0
		dd	0,2,8,0
		dd	2,3,8,2
		dd	3,4,8,3
		dd	4,9,8,4
		dd	6,9,4,6
		dd	7,9,6,7
		dd	7,0,9,7
		dd	1,10,11,1
		dd	1,11,2,1
		dd	11,3,2,11
		dd	11,5,3,11
		dd	11,10,5,11
		dd	10,6,5,10
		dd	10,7,6,10
		dd	10,1,7,10
		dd	0,7,1,0
		dd	0,1,2,0
		dd	3,5,4,3
		dd	5,6,4,5


section .text

calculs_trigo:		; cette fonction précalcule les cosinus et sinus des angles de 0 à 360°
					; et les sauvegarde dans les tableaux cosinus et sinus.
	boucle_trigo:
		fldpi	; st0=PI
		fimul dword[angle]	; st0=PI*angle
		fidiv dword[demiangle]	; st0=(PI*angle)/demi=angle en radians
		fsincos		; st0=cos(angleradian), st1=sin(angleradian)
		mov ecx,dword[angle]
		fstp dword[cosinus+ecx*DWORD] ; cosinus[REAL8*angle]=st0=cos(angle) puis st0=sin(angle)
		fstp dword[sinus+ecx*DWORD] ; sinus[REAL8*angle]=st0=sin(angle) puis st0 vide
		inc dword[angle]
		cmp dword[angle],360
		jbe boucle_trigo


;##################################################
;########### PROGRAMME PRINCIPAL ##################
;##################################################

main:

push rbp

;-------------------
; rotation X
mov rdi, enter_xRot
mov rax, 0
call printf

mov rdi, scan_int
mov rsi, rotationX
mov rax, 0
call scanf

;-------------------
; rotation Y
mov rdi, enter_yRot
mov rax, 0
call printf

mov rdi, scan_int
mov rsi, rotationY
mov rax, 0
call scanf


;-------------------
; rotation Z
mov rdi, enter_zRot
mov rax, 0
call printf

mov rdi, scan_int
mov rsi, rotationZ
mov rax, 0
call scanf



mov byte[i], 0
rotationLoop:

	jmp editPoints

	editPointsNext:
	inc byte[i]; i++
	cmp byte[i], 19; 20 faces => 0 to 19

	jb rotationLoop ; je ?


rotationdone:

; edit angles
; x' = x
; y' = y*cos(angX) - z*sin(angX)
; z' = y*sin(angX) + z*cos(angX)

; x' = z*sin(angY) + x*cos(angY)
; y' = y
; z' = z*cos(angY) - x*sin(angY)

; x' = x*cos(angZ) - y*sin(angZ)
; y' = x*sin(angZ) + y*cos(angZ)
; z' = z

;####################################
;## Code de création de la fenêtre ##
;####################################
xor     rdi,rdi
call    XOpenDisplay	; Création de display
mov     qword[display_name],rax	; rax=nom du display

mov     rax,qword[display_name]
mov     eax,dword[rax+0xe0]
mov     dword[screen],eax

mov rdi,qword[display_name]
mov esi,dword[screen]
call XRootWindow
mov rbx,rax

mov rdi,qword[display_name]
mov rsi,rbx
mov rdx,10
mov rcx,10
mov r8,400	; largeur
mov r9,400	; hauteur
push 0xFFFFFF	; background  0xRRGGBB
push 0x00FF00
push 1
call XCreateSimpleWindow
mov qword[window],rax

mov rdi,qword[display_name]
mov rsi,qword[window]
mov rdx,131077 ;131072
call XSelectInput

mov rdi,qword[display_name]
mov rsi,qword[window]
call XMapWindow

mov rdi,qword[display_name]
mov rsi,qword[window]
mov rdx,0
mov rcx,0
call XCreateGC
mov qword[gc],rax

mov rdi,qword[display_name]
mov rsi,qword[gc]
mov rdx,0x000000	; Couleur du crayon
call XSetForeground

; boucle de gestion des évènements
boucle: 
	mov rdi,qword[display_name]
	mov rsi,event
	call XNextEvent

	cmp dword[event],ConfigureNotify
	je prog_principal
	cmp dword[event],KeyPress
	je closeDisplay
jmp boucle

;###########################################
;## Fin du code de création de la fenêtre ##
;###########################################

;############################################
;##	Ici commence VOTRE programme principal ##
;############################################ 
prog_principal:

mov byte[i], 0
mainloop:
	; mov rdi, print_debug
	; movzx rsi, byte[i]
	; mov rax, 0
	; call printf

	mov byte[j], 0 ; j = 0
	jmp normals

	nextmainloop:
	inc byte[i]; i++
	cmp byte[i], 19; 20 faces => 0 to 19
	ja flush

	jmp mainloop


;##############################################
;##	Ici se termine VOTRE programme principal ##
;##############################################																																																																																																																																	     		     		jb boucle
jmp flush



flush:
mov rdi,qword[display_name]
call XFlush
jmp boucle
mov rax,34
syscall

pop rbp

closeDisplay:
    mov     rax,qword[display_name]
    mov     rdi,rax
    call    XCloseDisplay
    xor	    rdi,rdi
    call    exit


; mov byte[j], 0
dessins:
cmp byte[j], 3
jae nextmainloop

mov al, 4
mul byte[i]
add al, byte[j] ;; al = 4*i+j
mov byte[facesPos], al ; 4 * 0 , 4 * 1 .. put ourselves in the right place

; ;;;;;;;;;debug
; mov rdi, print_debug
; movzx esi, al
; mov rax, 0
; call printf
; ;;;;;;;;;debug

; get first point
movzx ecx, byte[facesPos]
mov eax, dword[faces+ecx*DWORD] ; on recupere le point (0,1,2,3) depuis facesPos
; ;;;;;;;;;debug
; mov rdi, print_debug
; mov esi, eax
; mov rax, 0
; call printf
; ;;;;;;;;;debug
mov dword[savePoint1], eax ; on le met dans savePoint1

; ;;;;;;;;;debug
; mov rdi, print_point
; mov esi, dword[savePoint1]
; mov rax, 0
; call printf
; ;;;;;;;;;debug

inc byte[j]
inc byte[facesPos]

; get second point
movzx ecx, byte[facesPos]
mov eax, dword[faces+ecx*DWORD]
mov dword[savePoint2], eax ; on le met dans savePoint2

; recuperer les coordonnées du point "1"
mov eax, 3
mul dword[savePoint1] ; 0 * 3 = point 1,  1 * 3 = point 2 ..
mov dword[pointPos], eax ; set pointPos for point 1

; point 1
mov ecx, dword[pointPos]
movss xmm0, dword[dodec+ecx*DWORD]
movss dword[x1], xmm0

inc dword[pointPos]; pointPos++ (y)
mov ecx, dword[pointPos]
movss xmm0, dword[dodec+ecx*DWORD]
movss dword[y1], xmm0

inc dword[pointPos] ; pointPos++ (z)
mov ecx, dword[pointPos]
movss xmm0, dword[dodec+ecx*DWORD]
movss dword[z1], xmm0


; recuperer les coordonnées du point "2"
mov eax, 3
mul dword[savePoint2]
mov dword[pointPos], eax ; reset pointPos for point 2

; point 1
mov ecx, dword[pointPos]
movss xmm0, dword[dodec+ecx*DWORD]
movss dword[x2], xmm0

inc dword[pointPos]; pointPos++ (y)
mov ecx, dword[pointPos]
movss xmm0, dword[dodec+ecx*DWORD]
movss dword[y2], xmm0

inc dword[pointPos] ; pointPos++ (z)
mov ecx, dword[pointPos]
movss xmm0, dword[dodec+ecx*DWORD]
movss dword[z2], xmm0

threeDto2D:
; X'=(df*X)/(Z+Zoff)+Xoff
; Y'=(df*Y)/(Z+Zoff)+Yoff


;;;;;;;;;;;;;;;;;;; X1
; (df*X)
movss xmm0, dword[df]
mulss xmm0, [x1]
movss dword[firstDiv], xmm0

; (Z+Zoff)
movss xmm1, dword[z1]
addss xmm1, dword[zoff]
movss dword[secondDiv], xmm1

; (firstDiv / secondDiv)    + Xoff
divss xmm0, xmm1
addss xmm0, dword[xoff]

cvtss2si eax, xmm0; to int
mov dword[finalX1], eax

;;;;;;;;;;;;;;;;;;; Y1
; (df*Y)
movss xmm0, dword[df]
mulss xmm0, [y1]
movss dword[firstDiv], xmm0

; (Z+Zoff)
movss xmm1, dword[z1]
addss xmm1, dword[zoff]
movss dword[secondDiv], xmm1

; (firstDiv / secondDiv)    + Xoff
divss xmm0, xmm1
addss xmm0, dword[yoff]

cvtss2si eax, xmm0; to int
mov dword[finalY1], eax




;;;;;;;;;;;;;;;;;;; X2
; (df*X)
movss xmm0, dword[df]
mulss xmm0, [x2]
movss dword[firstDiv], xmm0

; (Z+Zoff)
movss xmm1, dword[z2]
addss xmm1, dword[zoff]
movss dword[secondDiv], xmm1

; firstDiv / secondDiv    + Xoff
divss xmm0, xmm1
addss xmm0, dword[xoff]

cvtss2si eax, xmm0; to int
mov dword[finalX2], eax

;;;;;;;;;;;;;;;;;;; Y2
; (df*Y)
movss xmm0, dword[df]
mulss xmm0, [y2]
movss dword[firstDiv], xmm0

; (Z+Zoff)
movss xmm1, dword[z2]
addss xmm1, dword[zoff]
movss dword[secondDiv], xmm1

; firstDiv / secondDiv    + Xoff
divss xmm0, xmm1
addss xmm0, dword[yoff]

cvtss2si eax, xmm0; to int
mov dword[finalY2], eax


;;;;;;;;;debug;;;;;;;;
; mov rdi, print_x1
; mov esi, dword[finalX2]
; mov rax, 0
; call printf

; mov rdi, print_y1
; mov esi, dword[finalY1]
; mov rax, 0
; call printf

; mov rdi, print_x2
; mov esi, dword[finalX2]
; mov rax, 0
; call printf

; mov rdi, print_y2
; mov esi, dword[finalY2]
; mov rax, 0
; call printf
;;;;;;;;;debug;;;;;;;;

mov rdi,qword[display_name]
mov rsi,qword[window]
mov rdx,qword[gc]
mov ecx,dword[finalX1]
mov r8d,dword[finalY1]
mov r9d,dword[finalX2]
push qword[finalY2]
call XDrawLine

jmp dessins

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




normals:
; jmp dessins
;;;;;;;;;;;;;;;;;;;;;
; normals
;;;;;;;;;;;;;;;;;;;;;

mov al, 4
mul byte[i] ; numero de la face
mov byte[facesPos], al ; 4 * 0 , 4 * 1 .. put ourselves in the right place

; get first point
movzx ecx, byte[facesPos]
mov eax, dword[faces+ecx*DWORD]
mov dword[A], eax ; put point in A

inc byte[facesPos]
; get second point
movzx ecx, byte[facesPos]
mov eax, dword[faces+ecx*DWORD]
mov dword[B], eax ; put point in B

inc byte[facesPos]
; get third point
movzx ecx, byte[facesPos]
mov eax, dword[faces+ecx*DWORD]
mov dword[C], eax ; put point in C



; mov rdi, print_ABC
; movzx esi, byte[A]
; movzx edx, byte[B]
; movzx ecx, byte[C]
; mov rax, 0
; call printf


;;;Vecteur A
mov al, 3
mul byte[A]
mov bl, al

movzx ecx, bl
movss xmm0, dword[dodec+ecx*DWORD]
movss dword[xA], xmm0

inc bl
movzx ecx, bl
movss xmm0, dword[dodec+ecx*DWORD]
movss dword[yA], xmm0
;;;


;;;Vecteur B
mov al, 3
mul byte[B]
mov bl, al

movzx ecx, bl
movss xmm0, dword[dodec+ecx*DWORD]
movss dword[xB], xmm0

inc bl
movzx ecx, bl
movss xmm0, dword[dodec+ecx*DWORD]
movss dword[yB], xmm0
;;;


;;;Vecteur C
mov al, 3
mul byte[C]
mov bl, al

movzx ecx, bl
movss xmm0, dword[dodec+ecx*DWORD]
movss dword[xC], xmm0

inc bl
movzx ecx, bl
movss xmm0, dword[dodec+ecx*DWORD]
movss dword[yC], xmm0
;;;

; mov rdi, print_xyz
; mov esi, dword[xA]
; mov edx, dword[yA]
; mov ecx, dword[xB]
; mov r8d, dword[yB]
; mov r9d, dword[xC]
; mov r10d, dword[yC]
; mov rax, 0
; call printf


; multiplications (XBA*YBC)-(YBA*XBC)
movss xmm0, dword[xA]
movss xmm1, dword[xB]
subss xmm0, xmm1 ;; xmm0 = xBA
movss dword[xBA], xmm0

movss xmm0, dword[xC]
movss xmm1, dword[xB]
subss xmm0, xmm1 ;; xmm0 = xBC
movss dword[xBC], xmm0

movss xmm0, dword[yA]
movss xmm1, dword[yB]
subss xmm0, xmm1 ;; xmm0 = yBA
movss dword[yBA], xmm0

movss xmm0, dword[yC]
movss xmm1, dword[yB]
subss xmm0, xmm1 ;; xmm0 = yBC
movss dword[yBC], xmm0

;; (XBA*YBC)-(YBA*XBC)
movss xmm0, dword[xBA]
mulss xmm0, [yBC] ;; xmm0 = xBA*yBC
; xmm0 * [yBC] -> xmm0

movss xmm1, dword[yBA]
mulss xmm1, [xBC] ;; xmm1 = yBA*xBC
; xmm1 * [xBC] -> xmm1

subss xmm0, xmm1

cvtss2si eax, xmm0
mov dword[normal], eax

; (normal > 0) can't see | (normal < 0) can see
cmp dword[normal], 0

; mov rdi, print_debug
; mov esi, dword[normal]
; mov rax, 0
; call printf

jg nextmainloop ; go next face if we can't draw this one

jmp dessins



editPoints:

;;;;;;;;;debug
mov rdi, print_point
movzx esi, byte[i]
mov rax, 0
call printf
;;;;;;;;;debug

mov eax, 3
mul byte[i]
mov dword[pointPos], eax ; 3 * 0 , 3 * 1 .. put ourselves in the right place

; get X
mov ecx, dword[pointPos]
movss xmm0, dword[dodec+ecx*DWORD]
movss dword[xRot], xmm0
inc dword[pointPos]


; get Y
mov ecx, dword[pointPos]
movss xmm0, dword[dodec+ecx*DWORD]
movss dword[yRot], xmm0
inc dword[pointPos]


; get Z
mov ecx, dword[pointPos]
movss xmm0, dword[dodec+ecx*DWORD]
movss dword[zRot], xmm0
inc dword[pointPos]

mov rdi, print_debug
mov esi, dword[pointPos]
mov rax, 0
call printf


mov rdi, print_xyz2
cvtss2sd xmm0, dword[xRot]
cvtss2sd xmm1, dword[yRot]
cvtss2sd xmm2, dword[zRot]
mov rax, 3
call printf

jmp editPointsNext

; editPointsNext